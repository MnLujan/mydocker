;
; Asterisk configuration file
;
; Module Loader configuration file
;

[modules]
autoload=yes
;
; Any modules that need to be loaded before the Asterisk core has been
; initialized (just after the logger initialization) can be loaded
; using 'preload'.  'preload' forces a module and the modules it
; is known to depend upon to be loaded earlier than they normally get
; loaded.
;
; NOTE: There is no good reason left to use 'preload' anymore.  It was
; historically required to preload realtime driver modules so you could
; map Asterisk core configuration files to Realtime storage.
; This is no longer needed.
;
;preload => your_special_module.so
;
; If you want Asterisk to fail if a module does not load, then use
; the "require" keyword. Asterisk will exit with a status code of 2
; if a required module does not load.
;
; require = chan_pjsip.so
;
; If you want you can combine with preload
; preload-require = your_special_module.so
;
;load => res_musiconhold.so
;
; Load one of: chan_oss, alsa, or console (portaudio).
; By default, load chan_oss only (automatically).
;
noload => chan_alsa.so
;noload => chan_oss.so
noload => chan_console.so
load=>res_musiconhold.so
load => app_realtime.so
load => func_realtime.so
load => pbx_realtime.so
noload => res_hep.so
noload => res_hep_pjsip.so
noload => res_hep_rtcp.so
preload => res_odbc.so
preload => res_config_odbc.so
noload => chan_sip.so 
noload => cdr_mysql.so
noload => cdr_csv.so
noload => cdr_custom.so
noload => res_pjsip_config_wizard.so
;
